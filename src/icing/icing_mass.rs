//! –£—á–µ—Ç –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è

use std::rc::Rc;
use crate::{Bound, Moment};
use super::IIcingStab;

/// –£—á–µ—Ç –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞, —Ä–∞—Å—á–µ—Ç –º–∞—Å—Å—ã –ª—å–¥–∞. 
/// –ú–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è, —á–∞—Å—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–Ω—ã–º.  
/// –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–¥–æ–∏–∑–º–µ—â–µ–Ω–∏—è –∏  
/// –≤–æ–∑–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Ç—è–∂–µ—Å—Ç–∏. –ü—Ä–∏ —É—á–µ—Ç–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è –∫ –º–∞—Å—Å–µ —Å—É–¥–Ω–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è  
/// –º–∞—Å—Å–∞ –ª—å–¥–∞ –Ω–∞ –±–æ—Ä—Ç–∞—Ö, –ø–∞–ª—É–±–∞—Ö, –ø–∞–ª—É–±–Ω–æ–º –≥—Ä—É–∑–µ. –ú–∞—Å—Å–∞ –ª—å–¥–∞ –∏ –µ–≥–æ –º–æ–º–µ–Ω—Ç—ã,  
/// —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–ª—è –æ—Å–∞–¥–∫–∏ ùëëùëöùëñùëõ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—É–∑–∫–∏. 
#[derive(Clone)]
pub struct IcingMass {
    /// –¢–∏–ø –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞
    icing_stab: Rc<dyn IIcingStab>,
    /// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
    area_strength: Rc<dyn crate::strength::IArea>,
    /// –ü–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    area_stability: Rc<dyn crate::stability::IArea>,
}
///
impl IcingMass {
    /// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    /// * icing_stab - –¢–∏–ø –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞
    /// * area_strength - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
    /// * area_stability - –ü–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–æ–π—Å–∏–≤–æ—Å—Ç–∏
    pub fn new(
        icing_stab: Rc<dyn IIcingStab>,
        area_strength: Rc<dyn crate::strength::IArea>,   
        area_stability: Rc<dyn crate::stability::IArea>,
    ) -> Self {
        Self{
            icing_stab, 
            area_strength,   
            area_stability,      
        }
    }
}
///
impl IIcingMass for IcingMass {
    /// –ú–∞—Å—Å–∞ –ª—å–¥–∞ –ø–æ–ø–∞–¥–∞—é—â–∞—è –≤ Bound –∏–ª–∏ –≤—Å—è –µ—Å–ª–∏ Bound –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    fn mass(&self, bound: Option<Bound>) -> f64 {
        self.area_strength.area_desc_h(bound) * self.icing_stab.mass_desc_h() + 
        self.area_strength.area_timber_h(bound) * (self.icing_stab.mass_timber_h() - self.icing_stab.mass_desc_h()) + 
        self.area_strength.area_v(bound) * (1. + self.icing_stab.coef_v_ds_area()) * self.icing_stab.mass_v()
    }
    /// –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç –º–∞—Å—Å—ã –ª—å–¥–∞.
    fn moment(&self) -> Moment {
        let moment_v = self.area_stability.moment_v();
        let coef_v_ds_area = self.icing_stab.coef_v_ds_area();
        let mass_v = self.icing_stab.mass_v();
        let m_ice_v = moment_v.scale( (1. + coef_v_ds_area) * mass_v );
        let m_ice_h_desc = self.area_stability.moment_h().scale( self.icing_stab.mass_desc_h() );
        let moment_timber_h = self.area_stability.moment_timber_h();
        let delta_moment_timber_h = self.area_stability.delta_moment_timber_h();
        let delta_p_timber_h = self.icing_stab.mass_timber_h() - self.icing_stab.mass_desc_h();
        let delta_m_ice_timber_h = moment_timber_h.scale(delta_p_timber_h) + delta_moment_timber_h.scale(self.icing_stab.mass_timber_h());
        let res = m_ice_v.clone() + m_ice_h_desc.clone() + delta_m_ice_timber_h.clone();        
        log::info!("\t IcingMass moment moment_v:{moment_v} coef_v_ds_area:{coef_v_ds_area} mass_v:{mass_v} 
        m_ice_v:{m_ice_v} m_ice_h_desc:{m_ice_h_desc} moment_timber_h:{moment_timber_h} delta_moment_timber_h:{delta_moment_timber_h}
        delta_p_timber_h:{delta_p_timber_h} delta_m_ice_timber_h:{delta_m_ice_timber_h} res:{res}");
        res
    }
}
#[doc(hidden)]
pub trait IIcingMass {
    /// –ú–∞—Å—Å–∞ –ª—å–¥–∞ –ø–æ–ø–∞–¥–∞—é—â–∞—è –≤ Bound –∏–ª–∏ –≤—Å—è –µ—Å–ª–∏ Bound –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    fn mass(&self, bound: Option<Bound>) -> f64;
    /// –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç –º–∞—Å—Å—ã –ª—å–¥–∞.
    fn moment(&self) -> Moment;
}
// –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[doc(hidden)]
pub struct FakeIcing {
    mass: f64,
    moment: Moment,
}
#[doc(hidden)]
#[allow(dead_code)]
impl FakeIcing {
    pub fn new(
        mass: f64,
        moment: Moment,
    ) -> Self {
        Self {
            mass,
            moment,
        }
    }
}
#[doc(hidden)]
impl IIcingMass for FakeIcing {
    fn mass(&self, _: Option<Bound>) -> f64 {
        self.mass
    }
    fn moment(&self) -> Moment{
        self.moment.clone()
    }
}