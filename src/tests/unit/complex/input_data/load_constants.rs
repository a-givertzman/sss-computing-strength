use std::collections::HashMap;

use crate::data::structs::loads::{LoadConstantArray, LoadConstantData, LoadConstantType};

///
impl LoadConstantArray {
    /// Преобразование данных в массив ключ + значение
    pub fn from(src: Vec<(f64, f64, f64, i32)>) -> Self {
        Self {
            data: src
                .into_iter()
                .map(
                    |(mass, bound_x1, bound_x2, loading_type)| LoadConstantData {
                        mass,
                        bound_x1,
                        bound_x2,
                        loading_type: match loading_type {
                            20 => LoadConstantType::Hull,
                            _ => LoadConstantType::Equipment,
                        },
                    },
                )
                .collect(),
            error: HashMap::new(),
        }
    }
}

#[allow(dead_code)]
pub(crate) fn load_constants() -> LoadConstantArray {
    LoadConstantArray::from(vec![
        (90.95, -59.194, -53.364, 20),
        (48.39, -59.194, -53.364, 21),
        (114.81, -53.364, -47.534, 20),
        (129.48, -53.364, -47.534, 21),
        (110.33, -47.534, -41.704, 20),
        (31.01, -47.534, -41.704, 21),
        (53.96, -41.704, -35.874, 20),
        (16.50, -41.704, -35.874, 21),
        (53.96, -35.874, -30.044, 20),
        (16.50, -35.874, -30.044, 21),
        (53.96, -30.044, -24.214, 20),
        (16.50, -30.044, -24.214, 21),
        (53.96, -24.214, -18.384, 20),
        (16.50, -24.214, -18.384, 21),
        (53.96, -18.384, -12.554, 20),
        (16.50, -18.384, -12.554, 21),
        (53.96, -12.554, -6.724, 20),
        (16.50, -12.554, -6.724, 21),
        (53.96, -6.724, -0.894, 20),
        (16.50, -6.724, -0.894, 21),
        (53.96, -0.894, 4.936, 20),
        (16.50, -0.894, 4.936, 21),
        (53.96, 4.936, 10.766, 20),
        (16.50, 4.936, 10.766, 21),
        (53.96, 10.766, 16.596, 20),
        (16.50, 10.766, 16.596, 21),
        (53.96, 16.596, 22.426, 20),
        (16.50, 16.596, 22.426, 21),
        (53.96, 22.426, 28.256, 20),
        (16.50, 22.426, 28.256, 21),
        (53.96, 28.256, 34.086, 20),
        (29.70, 28.256, 34.086, 21),
        (114.81, 34.086, 39.916, 20),
        (17.48, 34.086, 39.916, 21),
        (98.41, 39.916, 45.746, 20),
        (40.85, 39.916, 45.746, 21),
        (128.23, 45.746, 51.576, 20),
        (51.03, 45.746, 51.576, 21),
        (96.91, 51.576, 57.406, 20),
        (42.23, 51.576, 57.406, 21),
    ])
}
