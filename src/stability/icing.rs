//! –£—á–µ—Ç –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è

use crate::{icing_stab::IIcingStab, Error, Moment};
use std::rc::Rc;

/// –£—á–µ—Ç –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞.
/// –ú–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è, —á–∞—Å—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–Ω—ã–º.  
/// –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–¥–æ–∏–∑–º–µ—â–µ–Ω–∏—è –∏  
/// –≤–æ–∑–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Ç—è–∂–µ—Å—Ç–∏. –ü—Ä–∏ —É—á–µ—Ç–µ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è –∫ –º–∞—Å—Å–µ —Å—É–¥–Ω–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è  
/// –º–∞—Å—Å–∞ –ª—å–¥–∞ –Ω–∞ –±–æ—Ä—Ç–∞—Ö, –ø–∞–ª—É–±–∞—Ö, –ø–∞–ª—É–±–Ω–æ–º –≥—Ä—É–∑–µ. –ú–∞—Å—Å–∞ –ª—å–¥–∞ –∏ –µ–≥–æ –º–æ–º–µ–Ω—Ç—ã,  
/// —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–ª—è –æ—Å–∞–¥–∫–∏ ùëëùëöùëñùëõ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∑–∞–≥—Ä—É–∑–∫–∏.
#[derive(Clone)]
pub struct IcingMoment {
    /// –¢–∏–ø –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞
    icing_stab: Rc<dyn IIcingStab>,
    /// –ü–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    area_stability: Rc<dyn crate::stability::IArea>,
}
//
impl IcingMoment {
    /// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    /// * icing_stab - –¢–∏–ø –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è —Å—É–¥–Ω–∞
    /// * area_stability - –ü–ª–æ—â–∞–¥–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–æ–π—Å–∏–≤–æ—Å—Ç–∏
    pub fn new(
        icing_stab: Rc<dyn IIcingStab>,
        area_stability: Rc<dyn crate::stability::IArea>,
    ) -> Self {
        Self {
            icing_stab,
            area_stability,
        }
    }
}
//
impl IIcingMoment for IcingMoment {
    /// –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç –º–∞—Å—Å—ã –ª—å–¥–∞.
    fn moment(&self) -> Result<Moment, Error> {
        let moment_v = self.area_stability.moment_v()?;
        let coef_v_ds_area = self.icing_stab.coef_v_ds_area();
        let mass_v = self.icing_stab.mass_v();
        let m_ice_v = moment_v.scale((1. + coef_v_ds_area) * mass_v);
        let m_ice_h_desc = self
            .area_stability
            .moment_h()?
            .scale(self.icing_stab.mass_desc_h());
        let moment_timber_h = self.area_stability.moment_timber_h()?;
        let delta_moment_timber_h = self.area_stability.delta_moment_timber_h()?;
        let delta_p_timber_h = self.icing_stab.mass_timber_h() - self.icing_stab.mass_desc_h();
        let delta_m_ice_timber_h = moment_timber_h.scale(delta_p_timber_h)
            + delta_moment_timber_h.scale(self.icing_stab.mass_timber_h());
        let res = m_ice_v.clone() + m_ice_h_desc.clone() + delta_m_ice_timber_h.clone();
        log::trace!("\t IcingMass moment moment_v:{moment_v} coef_v_ds_area:{coef_v_ds_area} mass_v:{mass_v} 
            m_ice_v:{m_ice_v} m_ice_h_desc:{m_ice_h_desc} moment_timber_h:{moment_timber_h} delta_moment_timber_h:{delta_moment_timber_h}
            delta_p_timber_h:{delta_p_timber_h} delta_m_ice_timber_h:{delta_m_ice_timber_h} res:{res}");
        Ok(res)
    }
}
#[doc(hidden)]
pub trait IIcingMoment {
    /// –°—É–º–º–∞—Ä–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç –º–∞—Å—Å—ã –ª—å–¥–∞.
    fn moment(&self) -> Result<Moment, Error>;
}
// –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#[doc(hidden)]
pub struct FakeIcingMoment {
    moment: Moment,
}
#[doc(hidden)]
#[allow(dead_code)]
impl FakeIcingMoment {
    pub fn new(moment: Moment) -> Self {
        Self { moment }
    }
}
#[doc(hidden)]
impl IIcingMoment for FakeIcingMoment {
    fn moment(&self) -> Result<Moment, Error> {
        Ok(self.moment.clone())
    }
}
