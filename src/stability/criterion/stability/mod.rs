//! –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å—É–¥–Ω–∞
pub(crate) mod acceleration;
pub(crate) mod circulation;
pub(crate) mod grain;
pub(crate) mod stab;

pub use acceleration::*;
pub use circulation::*;
pub use grain::*;
use log::info;
pub use stab::*;
use std::rc::Rc;

use crate::{
    data::structs::{NavigationArea, ShipType},
    Curve, Error, ICurve, ILeverDiagram, IMetacentricHeight, IWind,
};

use super::{CriterionData, CriterionID};
/// –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å—É–¥–Ω–∞
pub struct CriterionStability {
    /// –¢–∏–ø —Å—É–¥–Ω–∞
    ship_type: ShipType,
    /// –†–∞–π–æ–Ω –ø–ª–∞–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞
    navigation_area: NavigationArea,
    /// –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –ª–µ—Å–∞
    have_timber: bool,
    /// –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è —Å—ã–ø—É—á–µ–≥–æ –≥—Ä—É–∑–∞
    have_grain: bool,
    /// –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –≥—Ä—É–∑–∞ –∏–ª–∏
    #[allow(unused)]
    have_cargo: bool,
    /// –ü—Ä–∏–∑–Ω–∞–∫ —É—á–µ—Ç–∞ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è
    have_icing: bool,
    /// –£–≥–æ–ª –∑–∞–ª–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
    flooding_angle: f64,
    /// –î–ª–∏–Ω–∞ —Å—É–¥–Ω–∞
    ship_length: f64,
    /// –®–∏—Ä–∏–Ω–∞ —Å—É–¥–Ω–∞
    breadth: f64,
    /// –í—ã—Å–æ—Ç–∞ –±–æ—Ä—Ç–∞, –º
    moulded_depth: f64,
    /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç—Å–µ–∫–∏
    h_subdivision: f64,
    /// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É–≥–æ–ª –∫—Ä–µ–Ω–∞ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞.
    /// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ ùëùùë£ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –¥–ª—è —Å—É–¥–Ω–∞
    /// –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–ª–∞–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞.
    wind: Rc<dyn IWind>,
    /// –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–ª–µ—á —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    lever_diagram: Rc<dyn ILeverDiagram>,
    /// –ö—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–≥–æ–¥—ã K
    stability: Rc<dyn IStability>,
    /// –ü—Ä–æ–¥–æ–ª—å–Ω–∞—è –∏ –ø–æ–ø–µ—Ä–µ—á–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
    metacentric_height: Rc<dyn IMetacentricHeight>,
    /// –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    acceleration: Rc<dyn IAcceleration>,
    /// –†–∞—Å—á–µ—Ç –∫—Ä–µ–Ω–∞ –Ω–∞ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏
    circulation: Rc<dyn ICirculation>,
    /// –°–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –Ω–∞–≤–∞–ª–æ—á–Ω—ã—Ö —Å–º–µ—â–∞–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤ (–∑–µ—Ä–Ω–∞)
    grain: Box<dyn IGrain>,
}
//
impl CriterionStability {
    /// –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:
    /// * ship_type - –¢–∏–ø —Å—É–¥–Ω–∞
    /// * navigation_area - –†–∞–π–æ–Ω –ø–ª–∞–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞
    /// * breadth - –®–∏—Ä–∏–Ω–∞ —Å—É–¥–Ω–∞
    /// * moulded_depth - –í—ã—Å–æ—Ç–∞ –±–æ—Ä—Ç–∞, –º
    /// * h_subdivision - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç—Å–µ–∫–∏
    /// * navigation_area - –†–∞–π–æ–Ω –ø–ª–∞–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞
    /// * have_timber - –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –ª–µ—Å–∞
    /// * have_grain - –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è —Å—ã–ø—É—á–µ–≥–æ –≥—Ä—É–∑–∞
    /// * have_cargo - –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –≥—Ä—É–∑–∞ –∏–ª–∏ –±–∞–ª–ª–∞—Å—Ç–∞
    /// * have_icing - –ü—Ä–∏–∑–Ω–∞–∫ —É—á–µ—Ç–∞ –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è
    /// * flooding_angle - –£–≥–æ–ª –∑–∞–ª–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π
    /// * ship_length - –î–ª–∏–Ω–∞ —Å—É–¥–Ω–∞
    /// * wind - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É–≥–æ–ª –∫—Ä–µ–Ω–∞ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞
    /// * lever_diagram - –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–ª–µ—á —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    /// * stability - –ö—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–≥–æ–¥—ã K
    /// * metacentric_height - –ü—Ä–æ–¥–æ–ª—å–Ω–∞—è –∏ –ø–æ–ø–µ—Ä–µ—á–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
    /// * acceleration - –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    /// * circulation - –†–∞—Å—á–µ—Ç –∫—Ä–µ–Ω–∞ –Ω–∞ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏
    /// * grain - –°–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –Ω–∞–≤–∞–ª–æ—á–Ω—ã—Ö —Å–º–µ—â–∞–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤ (–∑–µ—Ä–Ω–∞)
    #[allow(clippy::too_many_arguments)]
    pub fn new(
        ship_type: ShipType,
        navigation_area: NavigationArea,
        breadth: f64,
        moulded_depth: f64,
        h_subdivision: f64,
        have_timber: bool,
        have_grain: bool,
        have_cargo: bool,
        have_icing: bool,
        flooding_angle: f64,
        ship_length: f64,
        wind: Rc<dyn IWind>,
        lever_diagram: Rc<dyn ILeverDiagram>,
        stability: Rc<dyn IStability>,
        metacentric_height: Rc<dyn IMetacentricHeight>,
        acceleration: Rc<dyn IAcceleration>,
        circulation: Rc<dyn ICirculation>,
        grain: Box<dyn IGrain>,
    ) -> Result<Self, Error> {
        if moulded_depth <= 0. {
            let error = Error::FromString("Criterion new error: moulded_depth <= 0.".to_owned());
            log::error!("{error}");
            return Err(error);
        }
        Ok(Self {
            ship_type,
            navigation_area,
            have_timber,
            have_grain,
            have_cargo,
            have_icing,
            flooding_angle,
            ship_length,
            breadth,
            moulded_depth,
            h_subdivision,
            wind,
            stability,
            lever_diagram,
            metacentric_height,
            acceleration,
            circulation,
            grain,
        })
    }
    //
    pub fn create(&mut self) -> Vec<CriterionData> {
        info!("Criterion begin");
        let mut out_data = Vec::new();
        if self.navigation_area != NavigationArea::R3Rsn {
            out_data.push(self.weather());
        }
        if self.navigation_area != NavigationArea::R3Rsn {
            out_data.push(self.static_angle());
        }
        out_data.append(&mut self.dso());
        out_data.push(self.dso_lever());
        if self.have_timber {
            out_data.push(self.dso_lever_timber());
        }
        if self.navigation_area != NavigationArea::Unlimited && self.have_icing {
            out_data.push(self.dso_lever_icing());
        }
        out_data.append(&mut self.dso_lever_max_angle());
        //       if self.have_cargo {
        out_data.push(self.metacentric_height());
        //    }
        if let Ok(h_trans_fix) = self.metacentric_height.h_trans_fix() {
            if self.navigation_area == NavigationArea::R2Rsn
                || self.navigation_area == NavigationArea::R2Rsn45
                || h_trans_fix.sqrt() / self.breadth > 0.08
                || self.breadth / self.moulded_depth > 2.5
            {
                out_data.push(self.accelleration());
            }
        }
        if self.ship_type == ShipType::ContainerShip {
            out_data.push(self.circulation());
        }
        if self.have_grain {
            out_data.append(&mut self.grain());
        }
        out_data.push(self.metacentric_height_subdivision());
        info!("Criterion end");
        out_data
    }
    /// –ö—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–≥–æ–¥—ã K
    pub fn weather(&mut self) -> CriterionData {
        let k = self.stability.k();
        match k {
            Ok(k) => CriterionData::new_result(CriterionID::Wheather, k, 1.),
            Err(error) => CriterionData::new_error(CriterionID::Wheather, error.to_string()),
        }
    }
    /// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —É–≥–æ–ª –∫—Ä–µ–Ω–∞ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞.
    /// –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–µ—á–∞ –∫—Ä–µ–Ω—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç –¥–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ ùëôùë§1, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø—Ä–∏
    /// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —É–≥–ª–∞ –∫—Ä–µ–Ω–∞ Œ∏ùë§1, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ ùëùùë£ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –¥–ª—è —Å—É–¥–Ω–∞
    /// –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–ª–∞–≤–∞–Ω–∏—è —Å—É–¥–Ω–∞.
    pub fn static_angle(&mut self) -> CriterionData {
        // –î–ª—è –≤—Å–µ—Ö —Å—É–¥–æ–≤ (–∫—Ä–æ–º–µ —Ä–∞–π–æ–Ω–∞ –ø–ª–∞–≤–∞–Ω–∏—è R3):
        // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≥–ª–∞ –∫—Ä–µ–Ω–∞ Œ∏ùë§1, –≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –≤–µ—Ç—Ä–æ–º
        let wind_lever = match self.wind.arm_wind_static() {
            Ok(wind_lever) => wind_lever,
            Err(text) => {
                return CriterionData::new_error(
                    CriterionID::WindStaticHeel,
                    "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–µ–Ω—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞: ".to_owned()
                        + &text.to_string(),
                )
            }
        };
        let binding = match self.lever_diagram.angle(wind_lever) {
            Ok(binding) => binding,
            Err(text) => return CriterionData::new_error(
                CriterionID::WindStaticHeel,
                "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≥–ª–∞ –∫—Ä–µ–Ω–∞ —Å—É–¥–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–µ—á—É –∫—Ä–µ–Ω—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞: ".to_owned() + &text.to_string(),
            ),
        };
        let angle = binding.first();
        let target_value = match self.ship_type {
            ShipType::TimberCarrier => 16.,
            ShipType::ContainerShip => 16.0f64.min(0.5 * self.flooding_angle),
            _ => 16.0f64.min(0.8 * self.flooding_angle),
        };
        if let Some(angle) = angle {
            CriterionData::new_result(CriterionID::WindStaticHeel, *angle, target_value)
        } else {
            CriterionData::new_error(
                CriterionID::WindStaticHeel,
                "–ù–µ—Ç —É–≥–ª–∞ –∫—Ä–µ–Ω–∞ —Å—É–¥–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π".to_owned(),
            )
        }
    }
    /// –ü–ª–æ—â–∞–¥–∏ –ø–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    pub fn dso(&self) -> Vec<CriterionData> {
        let mut results = Vec::new();
        let theta = self.lever_diagram.angle(0.).unwrap_or(vec![0., 0.]);
        let theta_0 = *theta.first().unwrap_or(&0.);
        let theta_max = *theta.last().unwrap_or(&0.);
        let second_angle_30 = theta_max.min(30.).min(self.flooding_angle);
        match self.lever_diagram.dso_area(theta_0, second_angle_30) {
            Ok(result) => results.push(CriterionData::new_result(
                CriterionID::AreaLC0_30,
                result,
                0.055,
            )),
            Err(text) => results.push(CriterionData::new_error(
                CriterionID::AreaLC0_30,
                "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ 0-30 –≥—Ä–∞–¥—É—Å–æ–≤: ".to_owned() + &text.to_string(),
            )),
        };
        let second_angle_40 = theta_max.min(40.).min(self.flooding_angle);
        let target_area = if self.ship_type != ShipType::TimberCarrier {
            0.09
        } else {
            0.08
        };
        match self.lever_diagram.dso_area(theta_0, second_angle_40) {
            Ok(result) => results.push(CriterionData::new_result(
                CriterionID::AreaLC0_40,
                result,
                target_area,
            )),
            Err(text) => results.push(CriterionData::new_error(
                CriterionID::AreaLC0_40,
                "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ 0-40 –≥—Ä–∞–¥—É—Å–æ–≤: ".to_owned() + &text.to_string(),
            )),
        };
        let first_angle_30 = theta_0.max(30.);
        match self.lever_diagram.dso_area(first_angle_30, second_angle_40) {
            Ok(result) => results.push(CriterionData::new_result(
                CriterionID::AreaLC30_40,
                result,
                0.03,
            )),
            Err(text) => results.push(CriterionData::new_error(
                CriterionID::AreaLC30_40,
                "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –ø–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ 30-40 –≥—Ä–∞–¥—É—Å–æ–≤: ".to_owned() + &text.to_string(),
            )),
        };
        //    log::info!("Criterion dso: zg:{} theta_0:{theta_0} theta_max:{theta_max} first_angle_30:{first_angle_30} second_angle_30:{second_angle_30} second_angle_40:{second_angle_40}", self.metacentric_height.z_g_fix().unwrap_or(-1.));
        results
    }
    /// –ú–∞–∫—Å–∏–º—É–º –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    pub fn dso_lever(&self) -> CriterionData {
        let curve = match Curve::new_linear(&[(105., 0.20), (80., 0.25)]) {
            Ok(curve) => curve,
            Err(text) => return CriterionData::new_error(
                CriterionID::MaximumLC,
                "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–≤–æ–π –≤ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: "
                    .to_owned()
                    + &text.to_string(),
            ),
        };
        let target = match curve.value(self.ship_length) {
            Ok(value) => value,
            Err(text) => return CriterionData::new_error(
                CriterionID::MaximumLC,
                "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏–≤–æ–π –≤ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: ".to_owned() + &text.to_string(),
            ),
        };
        let result = match self.lever_diagram.dso_lever_max(30., 90.) {
            Ok(value) => value,
            Err(text) => return CriterionData::new_error(
                CriterionID::MaximumLC,
                "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: ".to_owned() + &text.to_string(),
            ),
        };
        CriterionData::new_result(CriterionID::MaximumLC, result, target)
    }
    /// –ú–∞–∫—Å–∏–º—É–º –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –¥–ª—è –ª–µ—Å–æ–≤–æ–∑–æ–≤
    pub fn dso_lever_timber(&self) -> CriterionData {
        let target = 0.25;
        let result = match self.lever_diagram.dso_lever_max(0., 90.) {
            Ok(value) => value,
            Err(text) => return CriterionData::new_error(
                CriterionID::MaximumLcTimber,
                "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –¥–ª—è –ª–µ—Å–æ–≤–æ–∑–æ–≤: ".to_owned() + &text.to_string(),
            ),
        };
        CriterionData::new_result(CriterionID::MaximumLcTimber, result, target)
    }
    /// –ú–∞–∫—Å–∏–º—É–º –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è
    pub fn dso_lever_icing(&self) -> CriterionData {
        let target = 0.20;
        let result = match self.lever_diagram.dso_lever_max(25., 90.) {
            Ok(value) => value,
            Err(text) => return CriterionData::new_error(
                CriterionID::MaximumLcIcing,
                "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ—á–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–±–ª–µ–¥–µ–Ω–µ–Ω–∏—è: ".to_owned() + &text.to_string(),
            ),
        };
        CriterionData::new_result(CriterionID::MaximumLcIcing, result, target)
    }
    /// –£–≥–æ–ª, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º—É –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    pub fn dso_lever_max_angle(&self) -> Vec<CriterionData> {
        let mut results = Vec::new();
        let angles = match self.lever_diagram.max_angles() {
            Ok(angles) => angles,
            Err(text) => {
                results.push(CriterionData::new_error(
                    CriterionID::HeelMaximumLC,
                    "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≥–ª–∞ –∏ –ø–ª–µ—á–∞ –º–∞–∫—Å–∏–º—É–º–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–ª–µ—á —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã: ".to_owned() + &text.to_string(),
                ));
                return results;
            }
        };
        let b_div_d = self.breadth / self.moulded_depth;
        let mut target = 30.;
        if b_div_d > 2. {
            let k = match self.stability.k() {
                Ok(k) => k,
                Err(error) => {
                    results.push(CriterionData::new_error(
                        CriterionID::HeelMaximumLC,
                        error.to_string(),
                    ));
                    return results;
                }
            };
            target -= (40. * (b_div_d.min(2.5) - 2.) * (k.min(1.5) - 1.) * 0.5).round();
        }
        if let Some(angle) = angles.first() {
            if b_div_d > 2.5 {
                target = 15.;
                match self.metacentric_height.h_trans_fix() {
                    Ok(src_area) => {
                        let target_area = if angle.0 <= 15.0 {
                            0.07
                        } else if angle.0 >= 30.0 {
                            0.055
                        } else {
                            0.05 + 0.001 * (30.0 - angle.0)
                        };
                        results.push(CriterionData::new_result(
                            CriterionID::AreaLc0Thetalmax,
                            src_area,
                            target_area,
                        ));
                    },
                    Err(text) => results.push(CriterionData::new_error(
                        CriterionID::AreaLc0Thetalmax,
                        "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ø–µ—Ä–µ—á–Ω–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã –≤ —Ä–∞—Å—á–µ—Ç–µ —É–≥–ª–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º—É –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: ".to_owned() + &text.to_string(),
                    )),
                };
            } else if angles.len() > 1 {
                results.push(CriterionData::new_result(
                    CriterionID::HeelFirstMaximumLC,
                    angle.0,
                    25.,
                ));
            }
            results.push(CriterionData::new_result(
                CriterionID::HeelMaximumLC,
                angle.0,
                target,
            ));
        } else {
            results.push(CriterionData::new_error(
                CriterionID::HeelMaximumLC,
                "–ù–µ—Ç —É–≥–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º—É DSO –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π".to_owned(),
            ));
        }
        results
    }
    /// –ú–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
    pub fn metacentric_height(&self) -> CriterionData {
        // –í—Å–µ —Å—É–¥–∞
        let target = if self.have_grain {
            0.3
        } else if self.ship_type == ShipType::RoRo {
            0.2
        } else if self.have_timber {
            0.1
        } else {
            0.15
        };
        let result = match self.metacentric_height.h_trans_fix() {
            Ok(value) => value,
            Err(text) => return CriterionData::new_error(
                CriterionID::MinMetacentricHight,
                "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ø–µ—Ä–µ—á–Ω–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã –≤ —Ä–∞—Å—á–µ—Ç–µ –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã: ".to_owned() + &text.to_string(),
            ),
        };
        CriterionData::new_result(CriterionID::MinMetacentricHight, result, target)
    }
    /// –ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–∫–æ—Ä–µ–Ω–∏—è ùêæ‚àó
    pub fn accelleration(&self) -> CriterionData {
        let result = match self.acceleration.calculate() {
            Ok(value) => value,
            Err(text) => {
                return CriterionData::new_error(
                    CriterionID::Acceleration,
                    "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è: ".to_owned() + &text.to_string(),
                )
            }
        };
        CriterionData::new_result(CriterionID::Acceleration, result, 1.)
    }
    /// –ö—Ä–∏—Ç–µ—Ä–∏–π –∫—Ä–µ–Ω–∞ –Ω–∞ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏
    pub fn circulation(&self) -> CriterionData {
        let target = 16.0f64.min(self.flooding_angle / 2.);
        let angle = match self.circulation.angle() {
            Ok(value) => value,
            Err(text) => {
                return CriterionData::new_error(
                    CriterionID::HeelTurning,
                    "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—Ä–µ–Ω–∞ –Ω–∞ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏: ".to_owned() + &text.to_string(),
                )
            }
        };
        if let Some(angle) = angle {
            CriterionData::new_result(CriterionID::HeelTurning, angle, target)
        } else {
            match self.circulation.velocity(target) {
                Ok(velocity) => CriterionData::new_error(
                    CriterionID::HeelTurning,
                    format!(
                        "–ö—Ä–µ–Ω {target} –≥—Ä–∞–¥—É—Å–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å {} m/s');",
                        velocity,
                    ),
                ),
                Err(text) => {
                    CriterionData::new_error(
                        CriterionID::HeelTurning,
                        "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏: ".to_owned() + &text.to_string(),
                    )
                }
            }
        }
        // TODO: –í —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –ø–∞–ª—É–±–Ω—ã–π –≥—Ä—É–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫—Ä—ã—à–∫–∞—Ö –≥—Ä—É–∑–æ–≤—ã—Ö
        // –ª—é–∫–æ–≤, –≤–º–µ—Å—Ç–æ —É–≥–ª–∞ –≤—Ö–æ–¥–∞ –∫—Ä–æ–º–∫–∏ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–ª—É–±—ã –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –º–µ–Ω—å—à–∏–π –∏–∑ —É–≥–ª–æ–≤
        // –≤—Ö–æ–¥–∞ –≤ –≤–æ–¥—É –≤–µ—Ä—Ö–Ω–µ–π –∫—Ä–æ–º–∫–∏ –∫–æ–º–∏–Ω–≥—Å–∞ –ª—é–∫–∞ –∏–ª–∏ –≤—Ö–æ–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –≤–æ–¥—É (–≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞
        // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç—Ç–æ–≥–æ –∫–æ–º–∏–Ω–≥—Å–∞).
    }
    /// –ö—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –Ω–∞–≤–∞–ª–æ—á–Ω—ã—Ö —Å–º–µ—â–∞–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤
    pub fn grain(&mut self) -> Vec<CriterionData> {
        let mut results = Vec::new();
        match self.grain.angle() {
            Ok((angle1, angle2)) => results.push(CriterionData::new_result(
                CriterionID::HeelGrainDisplacement,
                angle1,
                angle2,
            )),
            Err(text) => results.push(CriterionData::new_error(
                CriterionID::HeelGrainDisplacement,
                "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —É–≥–ª–∞ –∫—Ä–µ–Ω–∞ –æ—Ç —Å–º–µ—â–µ–Ω–∏—è –∑–µ—Ä–Ω–∞ –∫—Ä–µ–Ω–∞: ".to_owned() + &text.to_string(),
            )),
        };
        if let Ok(area) = self.grain.area() {
            results.push(CriterionData::new_result(
                CriterionID::AreaLcGrainDisplacement,
                area,
                0.075,
            ));
        }
        results
    }
    /// –ú–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞
    pub fn metacentric_height_subdivision(&self) -> CriterionData {
        // –í—Å–µ —Å—É–¥–∞
        let result = match self.metacentric_height.h_trans_fix() {
            Ok(value) => value,
            Err(text) => {
                return CriterionData::new_error(
                    CriterionID::MinMetacentricHeightSubdivIndex,
                    "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ø–µ—Ä–µ—á–Ω–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–µ—Ç–∞—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–æ–π –≤—ã—Å–æ—Ç—ã: "
                        .to_owned()
                        + &text.to_string(),
                )
            }
        };
        CriterionData::new_result(
            CriterionID::MinMetacentricHeightSubdivIndex,
            result,
            self.h_subdivision,
        )
    }
}
